version: '3.8'

services:
  # 测试数据库
  test-db:
    image: postgres:15-alpine
    container_name: kratos-test-db
    environment:
      POSTGRES_DB: test_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    volumes:
      - test_postgres_data:/var/lib/postgresql/data
      - ../../migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d test_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - test-network

  # 测试Redis
  test-redis:
    image: redis:7-alpine
    container_name: kratos-test-redis
    ports:
      - "6380:6379"
    command: redis-server --appendonly yes
    volumes:
      - test_redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - test-network

  # 测试应用服务（用于端到端测试）
  test-app:
    build:
      context: ../..
      dockerfile: Dockerfile.dev
    container_name: kratos-test-app
    ports:
      - "8001:8000"
      - "9001:9000"
    environment:
      - CONFIG_PATH=/app/test/config/test.yaml
    volumes:
      - ../../test/config:/app/test/config
    depends_on:
      test-db:
        condition: service_healthy
      test-redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    networks:
      - test-network

  # 测试数据初始化服务
  test-init:
    image: postgres:15-alpine
    container_name: kratos-test-init
    environment:
      PGPASSWORD: postgres
    volumes:
      - ../../migrations:/migrations
      - ./init-test-data.sql:/init-test-data.sql
    command: >
      sh -c "
        echo 'Waiting for database to be ready...'
        until pg_isready -h test-db -p 5432 -U postgres; do
          sleep 1
        done
        echo 'Database is ready, running migrations...'
        for file in /migrations/*.up.sql; do
          if [ -f "$$file" ]; then
            echo "Running $$file"
            psql -h test-db -U postgres -d test_db -f "$$file"
          fi
        done
        echo 'Migrations completed'
        if [ -f /init-test-data.sql ]; then
          echo 'Loading test data...'
          psql -h test-db -U postgres -d test_db -f /init-test-data.sql
          echo 'Test data loaded'
        fi
      "
    depends_on:
      test-db:
        condition: service_healthy
    networks:
      - test-network

volumes:
  test_postgres_data:
    driver: local
  test_redis_data:
    driver: local

networks:
  test-network:
    driver: bridge