syntax = "proto3";

package auth.v1;

import "google/api/annotations.proto";

option go_package = "kratos-boilerplate/api/auth/v1;v1";

// 认证服务接口定义
service Auth {
  // 获取验证码
  rpc GetCaptcha(GetCaptchaRequest) returns (GetCaptchaReply) {
    option (google.api.http) = {
      get: "/api/v1/auth/captcha"
    };
  }
  
  // 验证验证码
  rpc VerifyCaptcha(VerifyCaptchaRequest) returns (VerifyCaptchaReply) {
    option (google.api.http) = {
      post: "/api/v1/auth/captcha/verify"
      body: "*"
    };
  }

  // 用户注册
  rpc Register(RegisterRequest) returns (RegisterReply) {
    option (google.api.http) = {
      post: "/api/v1/auth/register"
      body: "*"
    };
  }
  
  // 用户登录
  rpc Login(LoginRequest) returns (LoginReply) {
    option (google.api.http) = {
      post: "/api/v1/auth/login"
      body: "*"
    };
  }
  
  // 退出登录
  rpc Logout(LogoutRequest) returns (LogoutReply) {
    option (google.api.http) = {
      post: "/api/v1/auth/logout"
      body: "*"
    };
  }
  
  // 刷新令牌
  rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenReply) {
    option (google.api.http) = {
      post: "/api/v1/auth/refresh"
      body: "*"
    };
  }
  
  // 查询账户锁定状态
  rpc LockStatus(LockStatusRequest) returns (LockStatusReply) {
    option (google.api.http) = {
      get: "/api/v1/auth/lock-status/{username}"
    };
  }
}

// 获取验证码请求
// @description 用于获取不同类型验证码的请求消息
message GetCaptchaRequest {
  // 验证码类型，支持以下类型：
  // - "image": 图片验证码
  // - "sms": 短信验证码
  // - "email": 邮件验证码
  // @example "image"
  // @required
  string captcha_type = 1;
  
  // 目标地址，当验证码类型为sms或email时必填
  // - sms类型时：填写手机号，格式如 "+8613812345678"
  // - email类型时：填写邮箱地址，格式如 "user@example.com"
  // - image类型时：可选，用于指定客户端标识
  // @example "+8613812345678" or "user@example.com"
  string target = 2;
}

// 获取验证码响应
message GetCaptchaReply {
  // 验证码ID
  string captcha_id = 1;
  // 如果是图片验证码，返回图片内容（base64编码）
  string image_data = 2;
}

// 验证验证码请求
message VerifyCaptchaRequest {
  string captcha_id = 1;
  string captcha_code = 2;
}

// 验证验证码响应
message VerifyCaptchaReply {
  bool success = 1;
}

// 注册请求
// @description 用户注册请求，包含用户基本信息和验证码验证
message RegisterRequest {
  // 用户名，长度3-32位，支持字母、数字、下划线
  // 不能以数字开头，需要全局唯一
  // @example "john_doe"
  // @required
  // @minLength 3
  // @maxLength 32
  // @pattern "^[a-zA-Z][a-zA-Z0-9_]*$"
  string username = 1;
  
  // 密码，长度8-32位，必须包含字母和数字
  // 建议包含特殊字符以提高安全性
  // @example "MyPassword123!"
  // @required
  // @minLength 8
  // @maxLength 32
  // @format password
  string password = 2;
  
  // 邮箱地址，用于账户验证和找回密码
  // 必须是有效的邮箱格式
  // @example "john.doe@example.com"
  // @required
  // @format email
  string email = 3;
  
  // 手机号码，用于短信验证和账户安全
  // 支持国际格式，如+86开头的中国手机号
  // @example "+8613812345678"
  // @format phone
  string phone = 4;
  
  // 验证码ID，从GetCaptcha接口获取
  // @example "captcha_12345"
  // @required
  string captcha_id = 5;
  
  // 验证码内容，用户输入的验证码
  // @example "ABCD"
  // @required
  string captcha_code = 6;
}

// 注册响应
message RegisterReply {
  string message = 1;
}

// 登录请求
// @description 用户登录请求，支持用户名密码登录和双因子认证
message LoginRequest {
  // 用户名，可以是注册时的用户名、邮箱或手机号
  // @example "john_doe" or "john.doe@example.com" or "+8613812345678"
  // @required
  string username = 1;
  
  // 用户密码
  // @example "MyPassword123!"
  // @required
  // @format password
  string password = 2;
  
  // 验证码ID，从GetCaptcha接口获取
  // 某些情况下可能不需要验证码（如信任设备）
  // @example "captcha_12345"
  string captcha_id = 3;
  
  // 验证码内容，对应captcha_id的验证码
  // @example "ABCD"
  string captcha_code = 4;
  
  // TOTP双因子认证码，当用户启用TOTP时必填
  // 6位数字，从认证器应用生成
  // @example "123456"
  // @pattern "^[0-9]{6}$"
  string totp_code = 5;
}

// 登录响应
// @description 登录成功后返回的令牌信息
message LoginReply {
  // 访问令牌，用于API调用时的身份验证
  // 格式为JWT，包含用户信息和权限
  // @example "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
  string access_token = 1;
  
  // 刷新令牌，用于获取新的访问令牌
  // 有效期通常比访问令牌更长
  // @example "refresh_token_abc123..."
  string refresh_token = 2;
  
  // 访问令牌过期时间，单位为秒
  // 表示从当前时间开始多少秒后过期
  // @example 3600
  // @minimum 1
  int64 expires_in = 3;
}

// 退出登录请求
message LogoutRequest {}

// 退出登录响应
message LogoutReply {
  bool success = 1;
}

// 刷新令牌请求
message RefreshTokenRequest {
  string refresh_token = 1;
}

// 刷新令牌响应
message RefreshTokenReply {
  string access_token = 1;
  string refresh_token = 2;
  int64 expires_in = 3;
}

// 查询账户锁定状态请求
message LockStatusRequest {
  string username = 1;
}

// 查询账户锁定状态响应
message LockStatusReply {
  bool locked = 1;
  int64 unlock_time = 2; // 解锁时间戳（秒）
  int32 failed_attempts = 3; // 已失败次数
  int32 max_attempts = 4; // 最大允许失败次数
}