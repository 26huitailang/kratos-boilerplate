// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"kratos-boilerplate/internal/biz"
	"kratos-boilerplate/internal/conf"
	"kratos-boilerplate/internal/data"
	"kratos-boilerplate/internal/pkg/captcha"
	"kratos-boilerplate/internal/server"
	"kratos-boilerplate/internal/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, auth *conf.Auth, logger log.Logger) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	greeterRepo := data.NewGreeterRepo(dataData, logger)
	greeterUsecase := biz.NewGreeterUsecase(greeterRepo, logger)
	greeterService := service.NewGreeterService(greeterUsecase)
	grpcServer := server.NewGRPCServer(confServer, greeterService, logger)
	kmsRepo := data.NewKMSRepo(dataData, logger)
	kmsManager := data.NewKMSManager(kmsRepo, logger)
	userRepo, err := data.NewUserRepo(dataData, logger, kmsManager)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	config := data.NewCaptchaConfig(auth)
	captchaService := captcha.NewCaptchaService(userRepo, config, logger)
	authConfig := biz.NewAuthConfig(auth)
	authUsecase := biz.NewAuthUsecase(userRepo, captchaService, authConfig, logger)
	authService := service.NewAuthService(authUsecase, logger)
	httpServer := server.NewHTTPServer(confServer, greeterService, authService, logger)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
